/**
 * Copyright (C) 2015 Infinite Automation Software. All rights reserved.
 * @author Terry Packer
 */
package com.infiniteautomation.mango.rest.v2.exception;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.core.NestedRuntimeException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.serotonin.m2m2.vo.permission.PermissionException;

/**
 * 
 * Class to handle REST Specific Errors and present the user with a Model
 * and also log the errors neatly in our logs
 * 
 * @author Terry Packer
 *
 */
@ControllerAdvice
public class RestV2ExceptionHandler extends ResponseEntityExceptionHandler {
	 protected Log LOG = LogFactory.getLog(RestV2ExceptionHandler.class);
	 
    @ExceptionHandler({ 
    	//Anything that extends our Base Exception
    	AbstractRestV2Exception.class
    	})
    protected ResponseEntity<Object> handleMangoError(Exception e, WebRequest request) {
    	//Since all Exceptions handled by this method extend AbstractRestV2Exception we don't need to check type
    	AbstractRestV2Exception ex = (AbstractRestV2Exception)e;
    	return handleExceptionInternal(e, ex, new HttpHeaders(), ex.getStatus(), request);
    }
    
    @ExceptionHandler({ 
    	PermissionException.class
    	})
    protected ResponseEntity<Object> handlePermissionError(Exception e, WebRequest request) {
    	//Since all Exceptions handled by this method extend AbstractRestV2Exception we don't need to check type
    	PermissionException ex = (PermissionException)e;
    	return handleExceptionInternal(e, ex, new HttpHeaders(), HttpStatus.FORBIDDEN, request);
    }
    
    @ExceptionHandler({
    	Exception.class
    })
    public ResponseEntity<Object> handleAllOtherErrors(Exception ex, WebRequest request){
    	return handleExceptionInternal(ex, null, new HttpHeaders(), HttpStatus.INTERNAL_SERVER_ERROR, request);
    }
    
    /* (non-Javadoc)
     * @see org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler#handleExceptionInternal(java.lang.Exception, java.lang.Object, org.springframework.http.HttpHeaders, org.springframework.http.HttpStatus, org.springframework.web.context.request.WebRequest)
     */
    @Override
    protected ResponseEntity<Object> handleExceptionInternal(Exception ex,
    		Object body, HttpHeaders headers, HttpStatus status,
    		WebRequest request) {
    	
    	//Set the content type
    	headers.setContentType(MediaType.APPLICATION_JSON);
    	
    	//To strip off the double messages generated by this...
        if(ex instanceof NestedRuntimeException)
        	ex = (Exception) ((NestedRuntimeException) ex).getMostSpecificCause();

    	//If no body provided we will create one 
        if(body == null)
        	body = new GenericRestException(status, ex);
        
        return new ResponseEntity<Object>(body, headers, status);
    }
    
    
    
}
