/**
 * Copyright (C) 2016 Infinite Automation Software. All rights reserved.
 * @author Jared Wiltshire
 */
package com.serotonin.m2m2.db.upgrade;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.core.RowMapper;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.serotonin.ShouldNeverHappenException;
import com.serotonin.db.MappedRowCallback;
import com.serotonin.json.type.JsonObject;
import com.serotonin.m2m2.Common;
import com.serotonin.m2m2.db.DatabaseProxy;
import com.serotonin.m2m2.db.dao.AuditEventDao;
import com.serotonin.m2m2.db.dao.EventDao;
import com.serotonin.m2m2.i18n.TranslatableMessage;
import com.serotonin.m2m2.module.ModuleRegistry;
import com.serotonin.m2m2.module.definitions.EmailEventHandlerDefinition;
import com.serotonin.m2m2.module.definitions.ProcessEventHandlerDefinition;
import com.serotonin.m2m2.module.definitions.SetPointEventHandlerDefinition;
import com.serotonin.m2m2.rt.event.type.EventType;
import com.serotonin.m2m2.vo.event.AbstractEventHandlerVO;
import com.serotonin.m2m2.vo.event.EmailEventHandlerVO;
import com.serotonin.m2m2.vo.event.EventHandlerVO;
import com.serotonin.m2m2.vo.event.ProcessEventHandlerVO;
import com.serotonin.m2m2.vo.event.SetPointEventHandlerVO;
import com.serotonin.m2m2.vo.event.audit.AuditEventInstanceVO;
import com.serotonin.m2m2.web.mvc.spring.MangoRestSpringConfiguration;
import com.serotonin.util.SerializationHelper;

/**
 * Increases length of users' password field and prepends the hash algorithm name to the hash
 * @author Jared Wiltshire
 *
 */
public class Upgrade12 extends DBUpgrade {

	private static final Log LOG = LogFactory.getLog(Upgrade12.class);
	
	private ObjectMapper mapper;
	private MapType mapType;
	
	public Upgrade12(){
		mapper = MangoRestSpringConfiguration.objectMapper;
		TypeFactory typeFactory = mapper.getTypeFactory();
		mapType = typeFactory.constructMapType(HashMap.class, String.class, Object.class);
	}
	
    @Override
    public void upgrade() throws Exception {
        // get hash algorithm using the old default
        String hashAlgorithm = Common.envProps.getString("security.hashAlgorithm", "SHA-1");
        
        // Run the script.
        Map<String, String[]> scripts = new HashMap<>();
        
        scripts.put(DatabaseProxy.DatabaseType.DERBY.name(), new String[] {
            "ALTER TABLE users ALTER COLUMN password SET DATA TYPE VARCHAR(255);",
            "UPDATE users SET password  = '{" + hashAlgorithm + "}' || password;",
            "ALTER TABLE eventHandlers ADD COLUMN eventHandlerType VARCHAR(40);",
            "CREATE TABLE audit (id int not null generated by default as identity (start with 1, increment by 1),typeName varchar(32) NOT NULL,alarmLevel int NOT NULL,userId int NOT NULL,changeType int NOT NULL,objectId int NOT NULL,ts bigint NOT NULL,context longtext,message varchar(255),);",
            "alter table audit add constraint auditPk primary key (id);",
            "CREATE INDEX audit_performance1 ON audit (`ts` ASC);"
        });
        scripts.put(DatabaseProxy.DatabaseType.MYSQL.name(), new String[] {
            "ALTER TABLE users MODIFY password VARCHAR(255) NOT NULL;",
            "UPDATE users SET password  = CONCAT('{" + hashAlgorithm + "}', password);",
            "ALTER TABLE eventHandlers ADD COLUMN eventHandlerType VARCHAR(40);",
            "CREATE TABLE audit (id int NOT NULL auto_increment,typeName varchar(32) NOT NULL,alarmLevel int NOT NULL,userId int NOT NULL,changeType int NOT NULL,objectId int NOT NULL,ts bigint NOT NULL,context longtext, message varchar(255),PRIMARY KEY (id))engine=InnoDB;",
            "CREATE INDEX audit_performance1 ON audit (`ts` ASC);"
        });
        scripts.put(DatabaseProxy.DatabaseType.MSSQL.name(), new String[] {
            "ALTER TABLE users ALTER COLUMN password nvarchar(255) NOT NULL;",
            "UPDATE users SET password  = CONCAT('{" + hashAlgorithm + "}', password);",
            "ALTER TABLE eventHandlers ADD COLUMN eventHandlerType nvarchar(40);",
            "CREATE TABLE audit (id int NOT NULL identity,typeName nvarchar(32) NOT NULL,alarmLevel int NOT NULL,userId int NOT NULL,changeType int NOT NULL, objectId int NOT NULL,ts bigint NOT NULL,context ntext,message nvarchar(255),PRIMARY KEY (id));",
            "CREATE INDEX audit_performance1 ON audit (`ts` ASC);"
        });
        scripts.put(DatabaseProxy.DatabaseType.H2.name(), new String[] {
            "ALTER TABLE users ALTER COLUMN password VARCHAR(255) NOT NULL;",
            "UPDATE users SET password  = CONCAT('{" + hashAlgorithm + "}', password);",
            "ALTER TABLE eventHandlers ADD COLUMN eventHandlerType VARCHAR(40);",
            "CREATE TABLE audit (id int NOT NULL auto_increment,typeName varchar(32) NOT NULL,alarmLevel int NOT NULL,userId int NOT NULL,changeType int NOT NULL, objectId int NOT NULL,ts bigint NOT NULL,context longtext,message varchar(255),PRIMARY KEY (id));",
            "CREATE INDEX audit_performance1 ON audit (`ts` ASC);"
        });
        //TODO Untested
        scripts.put(DatabaseProxy.DatabaseType.POSTGRES.name(), new String[] {
            "ALTER TABLE users ALTER COLUMN password VARCHAR(255) NOT NULL;",
            "UPDATE users SET password  = CONCAT('{" + hashAlgorithm + "}', password);",
            "ALTER TABLE eventHandlers ADD COLUMN eventHandlerType VARCHAR(40);",
            "CREATE TABLE audit (id int NOT NULL auto_increment,typeName varchar(32) NOT NULL,alarmLevel int NOT NULL,userId int NOT NULL,changeType int NOT NULL, objectId int NOT NULL,ts bigint NOT NULL,context longtext,message varchar(255),PRIMARY KEY (id));",
            "CREATE INDEX audit_performance1 ON audit (`ts` ASC);"
        });
        
        runScript(scripts);
        
        upgradeEventHandlers();
        
        //Now make column not null
        scripts = new HashMap<>();
        scripts.put(DatabaseProxy.DatabaseType.DERBY.name(), new String[] {
            "ALTER TABLE eventHandlers ALTER COLUMN eventHandlerType NOT NULL;",
        });
        scripts.put(DatabaseProxy.DatabaseType.MYSQL.name(), new String[] {
            "ALTER TABLE eventHandlers MODIFY COLUMN eventHandlerType VARCHAR(40) NOT NULL;",
        });
        scripts.put(DatabaseProxy.DatabaseType.MSSQL.name(), new String[] {
            "ALTER TABLE eventHandlers ALTER COLUMN eventHandlerType nvarchar(40) NOT NULL;",
        });
        scripts.put(DatabaseProxy.DatabaseType.H2.name(), new String[] {
            "ALTER TABLE eventHandlers MODIFY COLUMN eventHandlerType VARCHAR(40) NOT NULL;",
        });
        runScript(scripts);
        
        //NOT DOING THIS YETupgradeAuditEvents();
        
        //Remove audit events
        int removed = this.ejt.update("DELETE FROM events WHERE typeName=?", new Object[]{EventType.EventTypeNames.AUDIT});
        LOG.info("Deleted " + removed + " AUDIT events from the events table.");
    }
    
    
    private static final String EVENT_HANDLER_SELECT = "select id, xid, alias, data from eventHandlers ";

	@SuppressWarnings("deprecation")
    private void upgradeEventHandlers(){

		List<EventHandlerVO> handlers = this.ejt.query(EVENT_HANDLER_SELECT, new EventHandlerRowMapper());
    	
    	//Convert them and update the database with the new handlers
    	for(EventHandlerVO vo : handlers){
    		switch(vo.getHandlerType()){
    			case EventHandlerVO.TYPE_EMAIL:
    				EmailEventHandlerVO emailHandler = new EmailEventHandlerVO();
    				emailHandler.setDefinition(ModuleRegistry.getEventHandlerDefinition(EmailEventHandlerDefinition.TYPE_NAME));
    				emailHandler.setDefinition(ModuleRegistry.getEventHandlerDefinition(EmailEventHandlerDefinition.TYPE_NAME));
    				emailHandler.setActiveRecipients(vo.getActiveRecipients());
    				emailHandler.setSendEscalation(vo.isSendEscalation());
    				emailHandler.setEscalationDelayType(vo.getEscalationDelayType());
    				emailHandler.setEscalationDelay(vo.getEscalationDelay());
    		        emailHandler.setEscalationRecipients(vo.getEscalationRecipients());
    		        emailHandler.setSendInactive(vo.isSendInactive());
    		        emailHandler.setInactiveOverride(vo.isInactiveOverride());
    		        emailHandler.setInactiveRecipients(vo.getInactiveRecipients());
    		        emailHandler.setIncludeSystemInfo(vo.isIncludeSystemInfo());
    		        emailHandler.setIncludePointValueCount(vo.getIncludePointValueCount());
    		        emailHandler.setIncludeLogfile(vo.isIncludeLogfile());
    		        upgradeEventHandler(emailHandler);
    		    break;
    			case EventHandlerVO.TYPE_PROCESS:
    		        ProcessEventHandlerVO processHandler = new ProcessEventHandlerVO();
    		        processHandler.setDefinition(ModuleRegistry.getEventHandlerDefinition(ProcessEventHandlerDefinition.TYPE_NAME));
    		        processHandler.setActiveProcessCommand(vo.getActiveProcessCommand());
    		        processHandler.setActiveProcessTimeout(vo.getActiveProcessTimeout());
    		        processHandler.setInactiveProcessCommand(vo.getInactiveProcessCommand());
    		        processHandler.setInactiveProcessTimeout(vo.getInactiveProcessTimeout());
    		        upgradeEventHandler(processHandler);
    			break;
    			case EventHandlerVO.TYPE_SET_POINT:
    		        SetPointEventHandlerVO setPointHandler = new SetPointEventHandlerVO();
    		        setPointHandler.setDefinition(ModuleRegistry.getEventHandlerDefinition(SetPointEventHandlerDefinition.TYPE_NAME));
    		        setPointHandler.setTargetPointId(vo.getTargetPointId());
    		        setPointHandler.setActiveAction(vo.getActiveAction());
    		        setPointHandler.setActiveValueToSet(vo.getActiveValueToSet());
    		        setPointHandler.setActivePointId(vo.getActivePointId());
    		        setPointHandler.setInactiveAction(vo.getInactiveAction());
    		        setPointHandler.setInactiveValueToSet(vo.getInactiveValueToSet());
    		        setPointHandler.setInactivePointId(vo.getInactivePointId());
    		        upgradeEventHandler(setPointHandler);
    			break;
    			default:
    				throw new ShouldNeverHappenException("Unknown event detector type: " + vo.getHandlerType());
    		}
    	}
    	
    }

	/**
	 * Upgrade a handler in the DB
	 * @param handler
	 */
    void upgradeEventHandler(AbstractEventHandlerVO handler) {
        ejt.update("update eventHandlers set xid=?, alias=?, eventHandlerType=?, data=? where id=?", new Object[] { handler.getXid(),
                handler.getAlias(), handler.getDefinition().getEventHandlerTypeName(), SerializationHelper.writeObject(handler), handler.getId() }, new int[] {
                Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.BINARY, Types.INTEGER });
    }
	
    @SuppressWarnings("deprecation")
	class EventHandlerRowMapper implements RowMapper<EventHandlerVO> {
		@Override
        public EventHandlerVO mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventHandlerVO h = (EventHandlerVO) SerializationHelper.readObjectInContext(rs.getBinaryStream(4));
            h.setId(rs.getInt(1));
            h.setXid(rs.getString(2));
            h.setAlias(rs.getString(3));
            return h;
        }
    }
    
    private void upgradeAuditEvents(){
    	//TODO Perform count first then show status
    	//Stream audit events across
    	EventDao.instance.query("SELECT subtypeName,typeRef1,typeRef2,activeTs,message from events where typeName=?", new Object[]{EventType.EventTypeNames.AUDIT}, new EventRowConverter(), new AuditEventMover());
    }
    
    class EventRowConverter implements RowMapper<AuditEventInstanceVO>{

		/* (non-Javadoc)
		 * @see org.springframework.jdbc.core.RowMapper#mapRow(java.sql.ResultSet, int)
		 */
		@Override
		public AuditEventInstanceVO mapRow(ResultSet rs, int rowNum)
				throws SQLException {
			int i=0;
			AuditEventInstanceVO vo = new AuditEventInstanceVO();
			vo.setTypeName(rs.getString(++i));
			vo.setUserId(rs.getInt(++i));
			vo.setObjectId(rs.getInt(++i));
			vo.setTimestamp(rs.getLong(++i));
			vo.setContext(readMessageAsContext(rs, ++i));
			return vo;
		}
    	
    }
    
    class AuditEventMover implements MappedRowCallback<AuditEventInstanceVO>{

		/* (non-Javadoc)
		 * @see com.serotonin.db.MappedRowCallback#row(java.lang.Object, int)
		 */
		@Override
		public void row(AuditEventInstanceVO item, int index) {
			AuditEventDao.instance.save(item);
		}
    	
    }
    
    private JsonObject readMessageAsContext(ResultSet rs, int index) throws SQLException{
    	TranslatableMessage message = readTranslatableMessage(rs, index);
    	String messageString = message.translate(Common.getTranslations());
    	System.out.println(messageString);
    	return  null;
    }
 
	public Object readValueFromString(String json) throws JsonParseException, JsonMappingException, IOException{
		return mapper.readValue(json, mapType);
	}
	
	public String writeValueAsString(Object value) throws JsonProcessingException{
		return mapper.writeValueAsString(value);
	}
    
    @Override
    protected String getNewSchemaVersion() {
        return "13";
    }
}
