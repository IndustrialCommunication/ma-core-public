/**
 * Copyright (C) 2015 Infinite Automation Software. All rights reserved.
 * @author Terry Packer
 */
package com.serotonin.m2m2.web.mvc.rest.v1.exception;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.ConversionNotSupportedException;
import org.springframework.beans.TypeMismatchException;
import org.springframework.core.NestedRuntimeException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.validation.BindException;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.multipart.support.MissingServletRequestPartException;
import org.springframework.web.servlet.NoHandlerFoundException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.serotonin.m2m2.web.mvc.rest.v1.csv.CSVException;
import com.serotonin.m2m2.web.mvc.rest.v1.model.RestErrorModel;

/**
 *
 * Class to handle REST Specific Errors and present the user with a Model
 * and also log the errors neatly in our logs
 *
 * @author Terry Packer
 *
 */
@ControllerAdvice
public class RestExceptionHandler extends ResponseEntityExceptionHandler {
    protected Log LOG = LogFactory.getLog(RestExceptionHandler.class);

    @ExceptionHandler({
        NoSupportingModelException.class,
        CSVException.class,
        ModelNotFoundException.class
    })
    protected ResponseEntity<Object> handleMangoError(Exception e, WebRequest request) {
        RestErrorModel error = new RestErrorModel(e);
        HttpHeaders headers = new HttpHeaders();
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(e.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return handleExceptionInternal(e, error, headers, HttpStatus.INTERNAL_SERVER_ERROR, request);
    }

    @Override
    protected ResponseEntity<Object> handleExceptionInternal(Exception ex,
            Object body, HttpHeaders headers, HttpStatus status,
            WebRequest request) {

        //To strip off the double messages generated by this...
        if(ex instanceof NestedRuntimeException)
            ex = (Exception) ((NestedRuntimeException) ex).getMostSpecificCause();

        if (LOG.isDebugEnabled()) {
            LOG.debug(ex);
        }
        RestErrorModel error = new RestErrorModel(ex);
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        if(body == null)
            body = error;

        return super.handleExceptionInternal(ex, body, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(
            HttpRequestMethodNotSupportedException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleHttpRequestMethodNotSupported(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(
            HttpMediaTypeNotSupportedException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleHttpMediaTypeNotSupported(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleHttpMediaTypeNotAcceptable(
            HttpMediaTypeNotAcceptableException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleHttpMediaTypeNotAcceptable(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleMissingServletRequestParameter(
            MissingServletRequestParameterException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleMissingServletRequestParameter(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleServletRequestBindingException(
            ServletRequestBindingException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleServletRequestBindingException(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleConversionNotSupported(
            ConversionNotSupportedException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleConversionNotSupported(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleTypeMismatch(
            TypeMismatchException ex, HttpHeaders headers, HttpStatus status,
            WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleTypeMismatch(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleHttpMessageNotReadable(
            HttpMessageNotReadableException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleHttpMessageNotReadable(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleHttpMessageNotWritable(
            HttpMessageNotWritableException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleHttpMessageNotWritable(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleMethodArgumentNotValid(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleMissingServletRequestPart(
            MissingServletRequestPartException ex, HttpHeaders headers,
            HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleMissingServletRequestPart(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleBindException(BindException ex,
            HttpHeaders headers, HttpStatus status, WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleBindException(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleNoHandlerFoundException(
            NoHandlerFoundException ex, HttpHeaders headers, HttpStatus status,
            WebRequest request) {
        headers.set("Messages", "error");
        headers.set("Errors", trimErrors(ex.getMessage()));
        headers.setContentType(MediaType.APPLICATION_JSON);
        return super.handleNoHandlerFoundException(ex, headers, status, request);
    }

    /**
     * Util to remove CR/LF and ensure no longer that 1000 chars
     */
    private String trimErrors(String message) {
        message = message.replaceAll("(\\r|\\n)", " ");
        if(message.length() > 1000)
            message = message.substring(0, 1000);
        return message;
    }
}
