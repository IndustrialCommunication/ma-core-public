/**
 * Copyright (C) 2018 Infinite Automation Software. All rights reserved.
 */
package com.serotonin.m2m2.web.mvc.spring.security;

import java.util.Arrays;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.client.authentication.OAuth2LoginAuthenticationToken;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent;
import org.springframework.stereotype.Component;

import com.infiniteautomation.mango.spring.events.MangoHttpSessionDestroyedEvent;
import com.serotonin.m2m2.Common;
import com.serotonin.m2m2.db.dao.UserDao;
import com.serotonin.m2m2.i18n.TranslatableMessage;
import com.serotonin.m2m2.rt.event.type.SystemEventType;
import com.serotonin.m2m2.vo.User;
import com.serotonin.m2m2.vo.permission.PermissionHolder;

/**
 * Class to handle all security related events.
 *
 * @author Terry Packer
 */
@Component
public class MangoSecurityEventListener {

    private static final Log LOG = LogFactory.getLog(MangoSecurityEventListener.class);
    private final UserDao userDao;

    /**
     * OAuth authentication success event contains {@link OAuth2LoginAuthenticationToken} but on logout the authentication
     * is {@link OAuth2AuthenticationToken}.
     */
    private final List<Class<? extends Authentication>> loginAuthentications = Arrays.asList(
            UsernamePasswordAuthenticationToken.class,
            OAuth2LoginAuthenticationToken.class,
            OAuth2AuthenticationToken.class
    );

    @Autowired
    public MangoSecurityEventListener(UserDao userDao) {
        this.userDao = userDao;
    }

    /**
     * Listen for events generated by the MangoSwitchUserFilter
     * @param event
     */
    @EventListener
    private void handleAuthenticationSwitchUserEvent(AuthenticationSwitchUserEvent event) {
        LOG.info("Switch User: '" + ((User)event.getAuthentication().getPrincipal()).getUsername() + "' switched to '" + event.getTargetUser().getUsername() + "'");
    }

    @EventListener
    private void handleAuthenticationSuccessEvent(AuthenticationSuccessEvent event) {
        Authentication authentication = event.getAuthentication();
        PermissionHolder principal = (PermissionHolder) authentication.getPrincipal();
        User user = principal.getUser();
        Object details = authentication.getDetails();

        String remoteAddress = "";
        boolean hasSession = false;
        if (details instanceof WebAuthenticationDetails) {
            WebAuthenticationDetails webDetails = (WebAuthenticationDetails) details;
            remoteAddress = webDetails.getRemoteAddress();

            // Basic authentication uses UsernamePasswordAuthenticationToken but does does have a session
            // we do not want to raise an event for basic authentication
            hasSession = webDetails.getSessionId() != null;
        }

        Class<? extends Authentication> authClass = authentication.getClass();
        if (user != null && hasSession && loginAuthentications.stream().anyMatch(a -> a.isAssignableFrom(authClass))) {
            // Update the last login time.
            userDao.recordLogin(user);

            SystemEventType eventType = new SystemEventType(SystemEventType.TYPE_USER_LOGIN, user.getId());
            TranslatableMessage message = new TranslatableMessage("event.login", user.getUsername(), remoteAddress);
            SystemEventType.raiseEvent(eventType, Common.timer.currentTimeMillis(), true, message);
        }
    }

    @EventListener
    private void handleHttpSessionDestroyedEvent(MangoHttpSessionDestroyedEvent event) {
        for (Authentication authentication : event.getAuthentications()) {
            PermissionHolder principal = (PermissionHolder) authentication.getPrincipal();
            User user = principal.getUser();
            Class<? extends Authentication> authClass = authentication.getClass();

            if (user != null && !event.isUserMigratedToNewSession() &&
                    loginAuthentications.stream().anyMatch(a -> a.isAssignableFrom(authClass))) {

                SystemEventType eventType = new SystemEventType(SystemEventType.TYPE_USER_LOGIN, user.getId());
                SystemEventType.returnToNormal(eventType, Common.timer.currentTimeMillis());
            }
        }
    }

}
